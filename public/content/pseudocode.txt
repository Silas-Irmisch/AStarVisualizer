1   QUEUE <- list containing only START
2   f_cost(START) <- 0
3   g_cost(START) <- 0
4   g_cost(rest of vertices) <- infinity
5   parent(all vertices) <- undefined
6   
7   while QUEUE is not empty:
8     current <- vertex in QUEUE with lowest f-cost
9     if current is END:
10	    reconstruct reverse path END to START by following parents
11	    return path
12    remove current from QUEUE
13    visited(current) <- true
14  
15    for neighbors of current:
16      if not visited(neighbor):
17        alt <- g_cost(current) + cost of current to neighbor
18        if neighbor not in QUEUE or alt < cost(neighbor):
19          parent(neighbor) <- current
20          g_cost(neighbor) <- alt
21          f_cost(neighbor) <- alt + h_cost(neighbor)
22          add neighbor to QUEUE
23  
24  return no path
